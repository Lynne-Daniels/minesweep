{"version":3,"sources":["Square.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["Square","e","preventDefault","this","props","squareStuff","handleClick","react_default","a","createElement","className","onMouseDown","bind","isCleared","char","Component","Grid","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","faces","newGame","winner","loser","height","width","blankSquares","numMines","state","face","grid","seconds","timer","unclearedNonMinedSquares","clearSquare","assertThisInitialized","sweep","initializeGame","_this2","setState","prevState","newState","makeGrid","reduce","total","row","subTotal","square","val","endGame","isWin","_this4","clearInterval","objectSpread","map","isActive","_this5","setInterval","startTimer","col","newGrid","toConsumableArray","newNumMines","currentSquare","count","toString","cb","arguments","length","undefined","_this6","type","endGameIfWon","rowAbove","rowBelow","c","Math","max","min","_this7","rowArr","ss","startGame","button","labelMine","push","randRow","floor","random","randCol","forEach","rowIdx","arr","colIdx","bottomRow","leftCol","rightCol","r","idx","key","src_Square","_this8","onClick","makeRow","App","src_Grid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1590751.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Square extends Component {\n\n  handleClick (e) {\n    e.preventDefault();\n    this.props.squareStuff.handleClick(e, this.props.squareStuff);\n  }\n\n  render () {\n\n    return (\n      <div>\n        <div className=\"square\" onMouseDown={this.handleClick.bind(this)}>{this.props.squareStuff.isCleared ? this.props.squareStuff.char : ''}</div>\n      </div>\n    );\n  }\n}\n\nexport default Square;","import React, { Component } from 'react';\nimport Square from './Square.js';\n\nclass Grid extends Component {\n\n   constructor(props) {\n    super(props);\n    this.faces = {\n      newGame: '😀',\n      winner: '😎',\n      loser: '😖'\n    }\n    this.height = 9;\n    this.width = 9;\n    this.blankSquares = 71\n    this.numMines = 10\n    this.state = {\n      face: this.faces.newGame,\n      grid: [],\n      numMines: this.numMines,\n      seconds: 0,\n      timer: null,\n      unclearedNonMinedSquares: this.blankSquares\n    }\n    this.clearSquare = this.clearSquare.bind(this);\n    this.sweep = this.sweep.bind(this);\n  }\n\n  componentDidMount() {\n    this.initializeGame();\n  }\n\n  initializeGame() {\n    this.setState((prevState) => {\n      const newState = {prevState};\n      newState.grid = this.makeGrid(this.width, this.height);\n      return {\n        grid: newState.grid,\n        face: this.faces.newGame,\n        numMines: this.numMines,\n        seconds: 0,\n        unclearedNonMinedSquares: this.blankSquares\n      };\n    })\n  }\n\n  startTimer() {\n    this.setState((prevState) => {\n      return {\n        seconds: prevState.seconds + 1\n      }\n    });\n  }\n\n  stopTimer(timer) {\n\n  }\n\n  endGameIfWon() {\n    // TODO make the inefficient recursive function to clear squares faster, then keep a \n    // running total of clearedsquares, measure how much faster that is than recalculating all the time\n    // project: set up a dashboard to measure and visualize the difference before fixing\n    const countClearedSquares = () => {\n      return this.state.grid.reduce((total, row) => {\n        return total + row.reduce((subTotal, square) => {\n          if (square.isCleared && square.val === 'blank') {\n            return subTotal + 1;\n          }\n          return subTotal;\n        }, 0) \n      }, 0)\n    }\n    if (countClearedSquares() === this.state.unclearedNonMinedSquares) {\n      this.endGame(true);\n    }\n  }\n\n  endGame(isWin){\n    // stop timer\n    clearInterval(this.state.timer);\n    // lock squares and show all mines\n    if (true) {\n      this.setState((prevState) => {\n        const newState = {...prevState}\n        newState.grid = prevState.grid.map((row) => row.map((square) => {\n          square.isActive = false;\n          if (square.val === 'mine' && square.char !== '🚩') {\n            square.char = isWin ? '🚩' : '💣'\n            square.isCleared = true;\n          }\n          if (square.val === 'blank' && square.char === '🚩') {\n            square.char = '❌'\n          }\n          return square;\n        }))\n        newState.face = isWin ? this.faces.winner : this.faces.loser;\n        newState.timer = null;\n        return newState;\n      })\n    }\n  }\n  \n  startGame(){\n    let timer = setInterval(() => {\n      this.startTimer();\n    }, 1000);\n    return timer;\n  }\n\n  labelMine(row, col) {\n    this.setState((prevState) => {\n      const newGrid = [...prevState.grid];\n      let newNumMines = [prevState.numMines];\n      const currentSquare = prevState.grid[row][col];\n      // toggle mine off\n      if (currentSquare.isCleared === true && currentSquare.char === '🚩') {\n        newNumMines++;\n        if (currentSquare.val === 'blank') {\n          newGrid[row][col].char = currentSquare.count > 0 ? currentSquare.count.toString() : '💦';\n        } else {\n          newGrid[row][col].char = '🚩';\n        }\n        newGrid[row][col].isCleared = false;\n      // toggle mine on\n      } else {\n        newNumMines--;\n        newGrid[row][col].char = '🚩';\n        newGrid[row][col].isCleared = true;\n      }\n      return {\n        grid: newGrid,\n        numMines: newNumMines\n      };\n    })\n  }\n  clearSquare(row, col, cb = () => {}) {\n    this.setState((prevState) => {\n      const newGrid = [...prevState.grid];\n      newGrid[row][col].isCleared = true;\n      newGrid[row][col].isActive = false;\n      return {grid: newGrid};\n    }, cb)\n  }\n  \n  // when a clear square is cleared, reveal all adjacent squares above and below\n  // recursively travel on all paths of clear squares, vertical, horizontal, and diagonal.\n  sweep(row, col, e) {\n    // if square does not exist, ignore it\n    if (row < 0 || row > this.height|| col < 0 || col > this.width) {\n      return;\n    }\n    if (this.state.grid[row][col].isCleared) {\n      return;\n    }\n    const sweepNeighbors = () => {\n      return (() => {\n        const rowAbove = row - 1;\n        const rowBelow = row + 1;\n        for (let c = Math.max(0, col - 1); c < Math.min(this.width, col + 2); c++) {\n          if (rowAbove >= 0) {\n            this.sweep(rowAbove, c);\n          }\n          if (rowBelow < this.height) {\n            this.sweep(rowBelow, c);\n          }\n        }\n        if (col >= 1) {\n          this.sweep(row, col - 1);\n        }\n        if (col < this.width - 1) {\n          this.sweep(row, col + 1);\n        }\n      })();\n    }\n    const square = this.state.grid[row][col];\n    if (square.val === 'mine' && e && (e.type === 'click' || e.type === 'mousedown')) {\n      this.clearSquare(row, col);\n      this.setState((prevState) => {\n        const newState = {...prevState};\n        newState.grid[row][col].char = '🔥';\n        return {grid: newState.grid};\n      })\n      this.endGame(false);\n      return;\n    }\n    // if it is a square and is blank, clear it\n    if (square.count > 0) {\n      this.clearSquare(row, col, this.endGameIfWon);\n      return;\n    }\n    // if it is also 0 count, clear the neighbors too.\n    if (square.val === 'blank' && !this.state.grid[row][col].isCleared) {\n      // clear squares around the mine-free area\n      this.clearSquare(row, col);\n      this.clearSquare(row, col, sweepNeighbors);\n    }\n    return;\n  }\n\n  makeGrid(width, height) {\n    const grid = [];\n    for (let row = 0; row < height; row++) {\n      const rowArr = [];\n      for (let col = 0; col < width; col++) {\n        const square = {\n          row,\n          col,\n          val: 'blank',\n          char: '💦',\n          count:0,\n          isActive: true,\n          isCleared: false,\n          handleClick : (e, ss) => {\n            e.preventDefault();\n            if (this.state.timer === null & this.state.grid[ss.row][ss.col].val === 'blank') {\n              this.setState({timer: this.startGame()});\n            }\n            if (this.state.grid[ss.row][ss.col].isActive) {\n              if (e.button === 0) {\n                this.sweep(ss.row, ss.col, e);\n              }\n              if (e.button === 2) {\n                this.labelMine(ss.row, ss.col, e);\n              }\n            }\n          },\n        }\n        square.handleClick = square.handleClick.bind(square);\n        rowArr.push(square);\n      }\n      grid.push(rowArr);\n    }\n\n    // add mines\n    for (let count = 0; count < this.numMines; count++) {\n      let randRow = Math.floor(Math.random() * height);\n      let randCol = Math.floor(Math.random() * width);\n      if (grid[randRow][randCol].val === 'blank') {\n        grid[randRow][randCol].val = 'mine';\n        grid[randRow][randCol].char = '💣'\n      } else {\n        count--;\n      }\n    }\n\n    // loop over all the squares adding numbers\n    grid.forEach((row, rowIdx, arr) => {\n      row.forEach((col, colIdx) => {\n        // loop over neighboring squares\n        const topRow = rowIdx - 1;\n        const bottomRow = rowIdx + 1;\n        const leftCol = colIdx - 1;\n        const rightCol = colIdx + 1;\n        for (let r = topRow; r <= bottomRow; r++) {\n          for (let c = leftCol; c <= rightCol; c++) {\n            if (r < 0 || r >= grid.length || c < 0 || c >= grid[0].length || (r === rowIdx && c === colIdx)) {\n              // do nothing - ignore self and ignore off the grid cells\n            } else if (grid[r][c].val === 'mine') {\n              // if neighboring square exists and has mine: count++\n              grid[rowIdx][colIdx].count++;\n            }\n          }\n        }\n        if (grid[rowIdx][colIdx].val !== 'mine' && grid[rowIdx][colIdx].count !== 0)\n        grid[rowIdx][colIdx].char = grid[rowIdx][colIdx].count.toString();\n      })\n    })\n    return grid;\n  }\n\n  makeRow(row, idx) { \n    return (\n      <div className=\"row\" key={idx}>\n      {row.map((val) => {\n        return <Square key={val.row + '-' + val.col} squareStuff={val} char={'g'}/>\n      })}\n      </div>\n    )\n  }\n  render() {\n   return(\n    <div className=\"container\">\n      <header>\n        <div className=\"scoreboard\">\n          <div className=\"score-title\">Mines</div>\n          <div className=\"score-item\">{this.state.numMines} </div>\n        </div>\n        <button onClick={()=>this.initializeGame()}>{this.state.face}</button>\n        <div className=\"scoreboard\">\n          <div className=\"score-title\">Timer</div>\n          <div className=\"score-item\">{this.state.seconds} </div>\n        </div>\n      </header>\n      <main className=\"centered\">\n      {this.state.grid.map((row, idx) => this.makeRow(row, idx))}\n      </main>\n    </div>\n   )\n  }\n}\n\nexport default Grid;","import React, { Component } from 'react';\nimport './App.css';\nimport Grid from './Grid.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Grid/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}