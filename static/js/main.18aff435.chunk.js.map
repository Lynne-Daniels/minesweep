{"version":3,"sources":["Square.js","Instructions.js","SelectGame.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["Square","e","preventDefault","this","props","squareStuff","handleClick","react_default","a","createElement","className","onMouseDown","bind","isCleared","char","Component","Instructions","role","aria-label","SelectGame","state","game","handleChange","target","value","_this","setState","changeGame","type","checked","onChange","Grid","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","faces","newGame","winner","loser","gameOptions","beginner","height","width","totalNumMines","blankSquares","advanced","expert","face","grid","numMines","seconds","timer","unclearedNonMinedSquares","assertThisInitialized","initializeGame","_this2","prevState","newState","objectSpread","makeGrid","_this3","console","log","clearInterval","reduce","total","row","subTotal","square","val","endGame","isWin","_this5","map","isActive","_this6","setInterval","startTimer","col","newGrid","toConsumableArray","newNumMines","currentSquare","count","toString","cb","arguments","length","undefined","_this7","clearSquare","endGameIfWon","rowAbove","rowBelow","c","Math","max","min","sweep","_this8","rowArr","ss","startGame","button","labelMine","push","randRow","floor","random","randCol","forEach","rowIdx","arr","colIdx","bottomRow","leftCol","rightCol","r","idx","key","src_Square","_this9","src_SelectGame","onClick","makeRow","src_Instructions","App","src_Grid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18aff435.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Square extends Component {\n\n  handleClick (e) {\n    e.preventDefault();\n    this.props.squareStuff.handleClick(e, this.props.squareStuff);\n  }\n\n  render () {\n\n    return (\n      <div>\n        <div className=\"square\" onMouseDown={this.handleClick.bind(this)}>{this.props.squareStuff.isCleared ? this.props.squareStuff.char : ''}</div>\n      </div>\n    );\n  }\n}\n\nexport default Square;","import React from 'react';\n\nconst Instructions = () => {\n return (\n   <div className=\"text\">\n    <article>\n      <h1>Minesweeper Instructions</h1>\n      <p>Find the mines <span role=\"img\" aria-label=\"water drops\">💣</span> hidden in the grid.  Left click a square to uncover the value hidden beneath.\n         Each square will show the number of mines to be found\n         in neighboring squares.</p>\n      <p>If there are no mines in neighboring squares, then the square\n         will contain a <span role=\"img\" aria-label=\"water drops\">💦</span>, and all neighboring non-mine squares will be uncovered. If you uncover all the non-mine squares, you win.\n      </p>\n      <p>\n      To mark the location of a mine with a <span role=\"img\" aria-label=\"flag\">🚩</span>, right click the square. Right click a second time if you wish to remove the flag.\n      \n      </p>\n      <p> \n        If you left click a mine you will see <span role=\"img\" aria-label=\"flames\">🔥</span>, and the game is over.  To try again\n        click the smiley face at the top of the board.  See how fast you can clear the board!\n      </p>\n    </article>\n   </div>\n )\n}\n\nexport default Instructions;","import React, { Component } from 'react';\n\nclass SelectGame extends Component {\n\n  state = {game: 'beginner'};\n\n  handleChange = (e) => {\n    let game = e.target.value;\n    this.setState({game: e.target.value}, this.props.changeGame(game));\n\n  }\n\n  render() {\n    return ( \n      <div>\n        <h2>Select Game Size</h2>\n        <form>\n          <input type=\"radio\" value=\"beginner\" checked={this.state.game === 'beginner'} onChange={this.handleChange}/>Beginner\n          <input type=\"radio\" value=\"advanced\" checked={this.state.game === 'advanced'} onChange={this.handleChange}/>Advanced\n          <input type=\"radio\" value=\"expert\" checked={this.state.game === 'expert'} onChange={this.handleChange}/>Expert\n        </form>\n\n\n      </div>\n    )\n  }\n}\n\nexport default SelectGame;\n","import React, { Component } from 'react';\nimport Square from './Square.js';\nimport Instructions from './Instructions.js';\nimport SelectGame from './SelectGame.js';\n\nclass Grid extends Component {\n\n   constructor(props) {\n    super(props);\n    this.faces = {\n      newGame: '😀',\n      winner: '😎',\n      loser: '😖'\n    }\n    this.gameOptions = {\n      beginner: {\n        height: 9,\n        width: 9,\n        totalNumMines: 10,\n        blankSquares: 71\n      },\n      advanced: {  // TODO look up traditional sizes online\n        height: 16,\n        width: 16,\n        totalNumMines: 40,\n        blankSquares: 216\n      },\n      expert: {\n        height: 16,\n        width: 30,\n        totalNumMines: 99,\n        blankSquares: 381\n      }\n    }\n\n    this.state = {\n      height: 9,\n      width: 9,\n      totalNumMines: 10,\n      blankSquares: 71,\n      face: this.faces.newGame,\n      grid: [],\n      numMines: this.numMines,\n      seconds: 0,\n      timer: null,\n      unclearedNonMinedSquares: this.blankSquares\n    }\n\n    this.changeGame = this.changeGame.bind(this);\n  }\n\n  componentDidMount() {\n    this.initializeGame();\n  }\n\n  initializeGame() {\n    this.setState((prevState) => {\n      const newState = {...prevState};\n      newState.grid = this.makeGrid(this.state.width, this.state.height);\n      return {\n        newState,\n        grid: newState.grid,\n        face: this.faces.newGame,\n        numMines: this.state.totalNumMines,\n        seconds: 0,\n        unclearedNonMinedSquares: this.state.blankSquares\n      };\n    })\n  }\n\n  startTimer() {\n    this.setState((prevState) => {\n      return {\n        seconds: prevState.seconds + 1\n      }\n    });\n  }\n\nchangeGame (game) {\n  console.log('Game options clicked', game, {...this.gameOptions[game]})\n  clearInterval(this.state.timer);\n  this.setState((prevState) => {\n    let newState = {...prevState};\n    return {\n      ...newState,\n      ...this.gameOptions[game]\n    }\n    }, () => {this.initializeGame()})\n  }\n\n\n\n  endGameIfWon() {\n    // TODO make the inefficient recursive function to clear squares faster, then keep a \n    // running total of clearedsquares, measure how much faster that is than recalculating all the time\n    // project: set up a dashboard to measure and visualize the difference before fixing\n    const countClearedSquares = () => {\n      return this.state.grid.reduce((total, row) => {\n        return total + row.reduce((subTotal, square) => {\n          if (square.isCleared && square.val === 'blank') {\n            return subTotal + 1;\n          }\n          return subTotal;\n        }, 0) \n      }, 0)\n    }\n    if (countClearedSquares() === this.state.unclearedNonMinedSquares) {\n      this.endGame(true);\n    }\n  }\n\n  endGame(isWin){\n    // stop timer\n    clearInterval(this.state.timer);\n    // lock squares and show all mines\n    if (true) {\n      this.setState((prevState) => {\n        const newState = {...prevState}\n        newState.grid = prevState.grid.map((row) => row.map((square) => {\n          square.isActive = false;\n          if (square.val === 'mine' && square.char !== '🚩') {\n            square.char = isWin ? '🚩' : '💣'\n            square.isCleared = true;\n          }\n          if (square.val === 'blank' && square.char === '🚩') {\n            square.char = '❌'\n          }\n          return square;\n        }))\n        newState.face = isWin ? this.faces.winner : this.faces.loser;\n        newState.timer = null;\n        return newState;\n      })\n    }\n  }\n  \n  startGame(){\n    let timer = setInterval(() => {\n      this.startTimer();\n    }, 1000);\n    return timer;\n  }\n\n  labelMine(row, col) {\n    this.setState((prevState) => {\n      const newGrid = [...prevState.grid];\n      let newNumMines = [prevState.numMines];\n      const currentSquare = prevState.grid[row][col];\n      // toggle mine off\n      if (currentSquare.isCleared === true && currentSquare.char === '🚩') {\n        newNumMines++;\n        if (currentSquare.val === 'blank') {\n          newGrid[row][col].char = currentSquare.count > 0 ? currentSquare.count.toString() : '💦';\n        } else {\n          newGrid[row][col].char = '🚩';\n        }\n        newGrid[row][col].isCleared = false;\n      // toggle mine on\n      } else {\n        newNumMines--;\n        newGrid[row][col].char = '🚩';\n        newGrid[row][col].isCleared = true;\n      }\n      return {\n        grid: newGrid,\n        numMines: newNumMines\n      };\n    })\n  }\n  clearSquare(row, col, cb = () => {}) {\n    this.setState((prevState) => {\n      const newGrid = [...prevState.grid];\n      newGrid[row][col].isCleared = true;\n      newGrid[row][col].isActive = false;\n      return {grid: newGrid};\n    }, cb)\n  }\n  \n  // when a clear square is cleared, reveal all adjacent squares above and below\n  // recursively travel on all paths of clear squares, vertical, horizontal, and diagonal.\n  sweep(row, col, e) {\n    // if square does not exist, ignore it\n    if (row < 0 || row > this.state.height|| col < 0 || col > this.state.width) {\n      return;\n    }\n    if (this.state.grid[row][col].isCleared) {\n      return;\n    }\n    const sweepNeighbors = () => {\n      return (() => {\n        const rowAbove = row - 1;\n        const rowBelow = row + 1;\n        for (let c = Math.max(0, col - 1); c < Math.min(this.state.width, col + 2); c++) {\n          if (rowAbove >= 0) {\n            this.sweep(rowAbove, c);\n          }\n          if (rowBelow < this.state.height) {\n            this.sweep(rowBelow, c);\n          }\n        }\n        if (col >= 1) {\n          this.sweep(row, col - 1);\n        }\n        if (col < this.state.width - 1) {\n          this.sweep(row, col + 1);\n        }\n      })();\n    }\n    const square = this.state.grid[row][col];\n    if (square.val === 'mine' && e && (e.type === 'click' || e.type === 'mousedown')) {\n      this.clearSquare(row, col);\n      this.setState((prevState) => {\n        const newState = {...prevState};\n        newState.grid[row][col].char = '🔥';\n        return {grid: newState.grid};\n      })\n      this.endGame(false);\n      return;\n    }\n    // if it is a square and is blank, clear it\n    if (square.count > 0) {\n      this.clearSquare(row, col, this.endGameIfWon);\n      return;\n    }\n    // if it is also 0 count, clear the neighbors too.\n    if (square.val === 'blank' && !this.state.grid[row][col].isCleared) {\n      // clear squares around the mine-free area\n      this.clearSquare(row, col);\n      this.clearSquare(row, col, sweepNeighbors);\n    }\n    return;\n  }\n\n  makeGrid(width, height) {\n    const grid = [];\n    for (let row = 0; row < height; row++) {\n      const rowArr = [];\n      for (let col = 0; col < width; col++) {\n        const square = {\n          row,\n          col,\n          val: 'blank',\n          char: '💦',\n          count:0,\n          isActive: true,\n          isCleared: false,\n          handleClick : (e, ss) => {\n            e.preventDefault();\n            if (this.state.timer === null & this.state.grid[ss.row][ss.col].val === 'blank') {\n              this.setState({timer: this.startGame()});\n            }\n            if (this.state.grid[ss.row][ss.col].isActive) {\n              if (e.button === 0) {\n                this.sweep(ss.row, ss.col, e);\n              }\n              if (e.button === 2) {\n                this.labelMine(ss.row, ss.col, e);\n              }\n            }\n          },\n        }\n        square.handleClick = square.handleClick.bind(square);\n        rowArr.push(square);\n      }\n      grid.push(rowArr);\n    }\n\n    // add mines\n    for (let count = 0; count < this.state.totalNumMines; count++) {\n      let randRow = Math.floor(Math.random() * height);\n      let randCol = Math.floor(Math.random() * width);\n      if (grid[randRow][randCol].val === 'blank') {\n        grid[randRow][randCol].val = 'mine';\n        grid[randRow][randCol].char = '💣'\n      } else {\n        count--;\n      }\n    }\n\n    // loop over all the squares adding numbers\n    grid.forEach((row, rowIdx, arr) => {\n      row.forEach((col, colIdx) => {\n        // loop over neighboring squares\n        const topRow = rowIdx - 1;\n        const bottomRow = rowIdx + 1;\n        const leftCol = colIdx - 1;\n        const rightCol = colIdx + 1;\n        for (let r = topRow; r <= bottomRow; r++) {\n          for (let c = leftCol; c <= rightCol; c++) {\n            if (r < 0 || r >= grid.length || c < 0 || c >= grid[0].length || (r === rowIdx && c === colIdx)) {\n              // do nothing - ignore self and ignore off the grid cells\n            } else if (grid[r][c].val === 'mine') {\n              // if neighboring square exists and has mine: count++\n              grid[rowIdx][colIdx].count++;\n            }\n          }\n        }\n        if (grid[rowIdx][colIdx].val !== 'mine' && grid[rowIdx][colIdx].count !== 0)\n        grid[rowIdx][colIdx].char = grid[rowIdx][colIdx].count.toString();\n      })\n    })\n    return grid;\n  }\n\n  makeRow(row, idx) { \n    return (\n      <div className=\"row\" key={idx}>\n      {row.map((val) => {\n        return <Square key={val.row + '-' + val.col} squareStuff={val} char={'g'}/>\n      })}\n      </div>\n    )\n  }\n  render() {\n   return(\n    <div className=\"container\">\n      <SelectGame gameOptions={this.gameOptions} changeGame={this.changeGame}/>\n      <header>\n        <div className=\"scoreboard\">\n          <div className=\"score-title\">Mines</div>\n          <div className=\"score-item\">{this.state.numMines} </div>\n        </div>\n        <button onClick={()=>this.initializeGame()}>{this.state.face}</button>\n        <div className=\"scoreboard\">\n          <div className=\"score-title\">Timer</div>\n          <div className=\"score-item\">{this.state.seconds} </div>\n        </div>\n      </header>\n      <main className=\"centered\">\n      {this.state.grid.map((row, idx) => this.makeRow(row, idx))}\n      </main>\n      <div>\n        <Instructions />\n      </div>\n    </div>\n   )\n  }\n}\n\nexport default Grid;","import React, { Component } from 'react';\nimport './App.css';\nimport Grid from './Grid.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Grid/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}